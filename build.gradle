buildscript {
    ext.kotlin_version = '1.3.50'
    ext.javapoet_version = '1.11.1'
    ext.moshi_version = '1.11.1-SNAPSHOT'
    ext.junit_version = '4.12'

    repositories {
        jcenter()
        mavenLocal()
    }
}

plugins {
    id "org.sonarqube" version "2.6.2"
}

apply from: "${project.rootDir}/scripts/jacoco-setup.gradle"

allprojects {
    repositories {
        jcenter()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        mavenLocal()
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "Gsonpath"
        property "sonar.projectKey", "gsonpath"
    }
}

task integrationCodeCoverageReport(type: JacocoReport) {
    executionData fileTree(dir: "compiler/standard").include("**/build/jacoco/*.exec")

    // Ignore extension code
    def excludes = ['gsonpath/compiler/ExtensionFieldMetadata.class']

    classDirectories = fileTree(dir: "compiler/standard/build/classes/java/main") +
            fileTree(dir: "compiler/standard/build/classes/kotlin/main") +
            fileTree(dir: "compiler/base/build/classes/java/main", excludes: excludes) +
            fileTree(dir: "compiler/base/build/classes/kotlin/main", excludes: excludes)

    sourceDirectories = files('compiler/standard/src/main/java',
            'compiler/base/src/main/java')

    reports {
        xml.setEnabled(true)
        xml.destination new File("${buildDir}/reports/jacoco/report.xml")
        html.setEnabled(false)
        csv.setEnabled(false)
    }

    dependsOn(':compiler:standard:test')
}

task unitCodeCoverageReport(type: JacocoReport) {
    executionData(
            fileTree(dir: "compiler/standard").include("**/build/jacoco/*.exec"),
            fileTree(dir: "library").include("**/build/jacoco/*.exec"),
            fileTree(dir: "library-kt").include("**/build/jacoco/*.exec")
    )

    // Ignore extension code
    def excludes = ['gsonpath/compiler/ExtensionFieldMetadata.class']

    classDirectories = fileTree(dir: "compiler/standard/build/classes/java/main") +
            fileTree(dir: "compiler/standard/build/classes/kotlin/main") +
            fileTree(dir: "compiler/base/build/classes/java/main", excludes: excludes) +
            fileTree(dir: "compiler/base/build/classes/kotlin/main", excludes: excludes) +
            fileTree(dir: "library/build/classes/java/main") +
            fileTree(dir: "library-kt/build/classes/java/main") +
            fileTree(dir: "library-kt/build/classes/kotlin/main")

    sourceDirectories = files('compiler/standard/src/main/java',
            'compiler/base/src/main/java',
            'library/src/main/java',
            'library-kt/src/main/java')

    reports {
        xml.setEnabled(true)
        xml.destination new File("${buildDir}/reports/jacoco/report.xml")
        html.setEnabled(false)
        csv.setEnabled(false)
    }

    dependsOn(
            ':compiler:standard:test',
            ':library:test',
            ':library-kt:test'
    )
}
